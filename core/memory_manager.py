# -*- coding: utf-8 -*-
"""memory_manager.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CTkh-DsYx9N00ZjMYlv85VIJha7AgkBT
"""

import json
from datetime import datetime
from typing import List, Dict, Any
from dataclasses import dataclass, asdict

@dataclass
class ConversationTurn:
    timestamp: str
    user_input: str
    bot_response: str
    context_used: str = ""
    topic: str = ""

class MemoryManager:
    def __init__(self, session_id: str = None):
        self.session_id = session_id or self._generate_session_id()
        self.conversation_history: List[ConversationTurn] = []
        self.user_profile = {
            "weak_topics": [],
            "strong_topics": [],
            "study_preferences": {},
            "performance_stats": {}
        }
        self.load_memory()

    def _generate_session_id(self) -> str:
        """Generate unique session ID"""
        return f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

    def add_turn(self, user_input: str, bot_response: str, context: str = "", topic: str = ""):
        """Add a conversation turn to memory"""
        turn = ConversationTurn(
            timestamp=datetime.now().isoformat(),
            user_input=user_input,
            bot_response=bot_response,
            context_used=context,
            topic=topic
        )

        self.conversation_history.append(turn)

        # Keep only recent turns
        if len(self.conversation_history) > Config.MAX_MEMORY_TURNS:
            self.conversation_history = self.conversation_history[-Config.MAX_MEMORY_TURNS:]

        self.save_memory()

    def get_recent_context(self, num_turns: int = 5) -> str:
        """Get recent conversation context"""
        if not self.conversation_history:
            return ""

        recent_turns = self.conversation_history[-num_turns:]
        context_parts = []

        for turn in recent_turns:
            context_parts.append(f"User: {turn.user_input}")
            context_parts.append(f"Assistant: {turn.bot_response[:200]}...")

        return "\n".join(context_parts)

    def update_user_profile(self, topic: str, performance: str):
        """Update user's learning profile"""
        if performance in ["weak", "difficult"]:
            if topic not in self.user_profile["weak_topics"]:
                self.user_profile["weak_topics"].append(topic)
        elif performance in ["strong", "easy"]:
            if topic not in self.user_profile["strong_topics"]:
                self.user_profile["strong_topics"].append(topic)
            # Remove from weak topics if present
            if topic in self.user_profile["weak_topics"]:
                self.user_profile["weak_topics"].remove(topic)

    def save_memory(self):
        """Save memory to disk"""
        memory_data = {
            "session_id": self.session_id,
            "conversation_history": [asdict(turn) for turn in self.conversation_history],
            "user_profile": self.user_profile
        }

        try:
            with open(Config.MEMORY_FILE, 'w') as f:
                json.dump(memory_data, f, indent=2)
        except Exception as e:
            print(f"Error saving memory: {e}")

    def load_memory(self):
        """Load memory from disk"""
        try:
            if Config.MEMORY_FILE.exists():
                with open(Config.MEMORY_FILE, 'r') as f:
                    memory_data = json.load(f)

                # Load conversation history
                history_data = memory_data.get("conversation_history", [])
                self.conversation_history = [
                    ConversationTurn(**turn_data) for turn_data in history_data
                ]

                # Load user profile
                self.user_profile.update(memory_data.get("user_profile", {}))

        except Exception as e:
            print(f"Error loading memory: {e}")