# -*- coding: utf-8 -*-
"""ui_cli.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CTkh-DsYx9N00ZjMYlv85VIJha7AgkBT
"""

class CLIInterface:
    """Command Line Interface for AI NEET Coach"""

    def __init__(self):
        self.llm = LLMPlugin()
        self.memory = MemoryManager()
        self.knowledge = KnowledgeIngestion()
        self.running = True

    def display_welcome(self):
        """Display welcome message"""
        print("\n" + "="*60)
        print("üéØ AI NEET Coach - Command Line Interface")
        print("="*60)
        print("Commands:")
        print("  /help     - Show this help")
        print("  /mcq      - Practice MCQ questions")
        print("  /explain  - Get topic explanation")
        print("  /search   - Search knowledge base")
        print("  /profile  - View your learning profile")
        print("  /clear    - Clear conversation history")
        print("  /quit     - Exit the application")
        print("  Or just type your question naturally!")
        print("="*60)

    def handle_command(self, user_input: str):
        """Handle special commands"""
        command = user_input.lower().strip()

        if command == '/help':
            self.display_welcome()

        elif command == '/mcq':
            self.practice_mcq()

        elif command.startswith('/explain'):
            topic = command.replace('/explain', '').strip()
            if not topic:
                topic = input("Enter topic to explain: ")
            self.explain_topic(topic)

        elif command.startswith('/search'):
            query = command.replace('/search', '').strip()
            if not query:
                query = input("Enter search query: ")
            self.search_knowledge(query)

        elif command == '/profile':
            self.show_profile()

        elif command == '/clear':
            self.memory.conversation_history.clear()
            print("‚úÖ Conversation history cleared!")

        elif command == '/quit':
            self.running = False
            print("üëã Goodbye! Happy studying!")

        else:
            return False  # Not a command

        return True

    def practice_mcq(self):
        """Practice MCQ questions"""
        print("\nüìù MCQ Practice Mode")

        # Search for MCQs
        mcq_results = self.knowledge.search_knowledge_base("MCQ questions", num_results=10)
        mcqs = [r for r in mcq_results if r['metadata'].get('type') == 'mcq']

        if not mcqs:
            print("‚ùå No MCQs found. Please add MCQ files to data/mcqs/")
            return

        import random
        mcq = random.choice(mcqs)
        content = mcq['content']

        # Parse MCQ
        lines = content.split('\n')
        question = ""
        options = []
        correct_answer = ""

        for line in lines:
            if line.startswith("Question:"):
                question = line.replace("Question:", "").strip()
            elif line.startswith("Options:"):
                options_text = line.replace("Options:", "").strip()
                options = [opt.strip() for opt in options_text.split('|')]
            elif line.startswith("Correct Answer:"):
                correct_answer = line.replace("Correct Answer:", "").strip()

        if question and options:
            print(f"\n‚ùì {question}")
            print("\nOptions:")
            for i, option in enumerate(options, 1):
                print(f"  {i}. {option}")

            try:
                user_choice = int(input("\nEnter your choice (1-4): "))
                if 1 <= user_choice <= len(options):
                    user_answer = options[user_choice - 1]

                    if correct_answer in user_answer:
                        print("‚úÖ Correct! Well done!")
                        self.memory.update_user_profile(
                            mcq['metadata'].get('subject', 'General'),
                            "strong"
                        )
                    else:
                        print("‚ùå Incorrect!")
                        print(f"Correct answer: {correct_answer}")
                        self.memory.update_user_profile(
                            mcq['metadata'].get('subject', 'General'),
                            "weak"
                        )

                        # Generate explanation
                        explanation = self.llm.solve_mcq(question, options)
                        print(f"\nüí° Explanation:\n{explanation}")
                else:
                    print("‚ùå Invalid choice!")
            except ValueError:
                print("‚ùå Please enter a valid number!")

    def explain_topic(self, topic: str):
        """Explain a topic"""
        print(f"\nüìö Explaining: {topic}")

        # Search for relevant content
        search_results = self.knowledge.search_knowledge_base(topic, num_results=3)
        context = ""

        if search_results:
            context_parts = []
            for result in search_results:
                context_parts.append(result['content'])
            context = "\n\n".join(context_parts)

        print("ü§î Generating explanation...")
        explanation = self.llm.generate_explanation(topic, context)

        print(f"\nüí° Explanation:\n{explanation}")

        # Save to memory
        self.memory.add_turn(f"Explain: {topic}", explanation, context, topic)

    def search_knowledge(self, query: str):
        """Search knowledge base"""
        print(f"\nüîç Searching for: {query}")

        results = self.knowledge.search_knowledge_base(query, num_results=5)

        if results:
            print(f"\n‚úÖ Found {len(results)} results:")
            for i, result in enumerate(results, 1):
                print(f"\n{i}. {result['metadata'].get('subject', 'Unknown')} - {result['metadata'].get('type', 'Unknown')}")
                print(f"   {result['content'][:200]}...")
        else:
            print("‚ùå No results found.")

    def show_profile(self):
        """Show user learning profile"""
        print("\nüë§ Your Learning Profile")
        print("-" * 30)

        if self.memory.user_profile["weak_topics"]:
            print("üìâ Weak Topics:")
            for topic in self.memory.user_profile["weak_topics"]:
                print(f"  ‚Ä¢ {topic}")

        if self.memory.user_profile["strong_topics"]:
            print("\nüìà Strong Topics:")
            for topic in self.memory.user_profile["strong_topics"]:
                print(f"  ‚Ä¢ {topic}")

        if not self.memory.user_profile["weak_topics"] and not self.memory.user_profile["strong_topics"]:
            print("No learning data yet. Start practicing to build your profile!")

    def chat_mode(self, user_input: str):
        """Handle regular chat"""
        print("ü§î Thinking...")

        # Get context
        search_results = self.knowledge.search_knowledge_base(user_input, num_results=3)
        context = ""

        if search_results:
            context_parts = []
            for result in search_results:
                context_parts.append(result['content'][:300])
            context = "\n\n".join(context_parts)

        # Get recent conversation context
        recent_context = self.memory.get_recent_context(3)
        full_context = f"{recent_context}\n\nRelevant Knowledge:\n{context}"

        # Generate response
        response = self.llm.generate_response(user_input, full_context)
        print(f"\nü§ñ AI Coach: {response}")

        # Save to memory
        self.memory.add_turn(user_input, response, context)

    def run(self):
        """Run the CLI interface"""
        self.display_welcome()

        while self.running:
            try:
                user_input = input("\nüí¨ You: ").strip()

                if not user_input:
                    continue

                # Handle commands
                if user_input.startswith('/'):
                    if self.handle_command(user_input):
                        continue

                # Regular chat
                self.chat_mode(user_input)

            except KeyboardInterrupt:
                print("\nüëã Goodbye! Happy studying!")
                break
            except EOFError:
                print("\nüëã Goodbye! Happy studying!")
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")

# =============================================================================
# Additional utility functions
# =============================================================================

def run_cli():
    """Run CLI version of the coach"""
    print("üéØ Starting AI NEET Coach CLI...")

    # Setup
    Config.ensure_directories()

    # Check if knowledge base exists
    knowledge_base_exists = (Config.KNOWLEDGE_BASE_DIR / "chroma.sqlite3").exists()

    if not knowledge_base_exists:
        print("üìö No knowledge base found. Would you like to ingest knowledge now? (y/n)")
        choice = input().lower().strip()

        if choice == 'y':
            print("üîÑ Running knowledge ingestion...")
            try:
                ingestion = KnowledgeIngestion()
                ingestion.ingest_all()
                print("‚úÖ Knowledge ingestion completed!")
            except Exception as e:
                print(f"‚ùå Knowledge ingestion failed: {e}")
                print("‚ö†Ô∏è  Continuing with basic functionality...")

    # Start CLI
    cli = CLIInterface()
    cli.run()

# =============================================================================
# Installation and Setup Script
# =============================================================================

def install_requirements():
    """Install required packages"""
    requirements = [
        "ollama",
        "streamlit",
        "transformers",
        "torch",
        "sentence-transformers",
        "faiss-cpu",
        "pypdf2",
        "python-docx",
        "pandas",
        "numpy",
        "chromadb",
        "tiktoken"
    ]

    print("üì¶ Installing required packages...")
    for package in requirements:
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", package],
                         check=True, capture_output=True)
            print(f"‚úÖ {package}")
        except subprocess.CalledProcessError:
            print(f"‚ùå Failed to install {package}")

    print("‚úÖ Installation completed!")

def setup_ollama_models():
    """Setup Ollama models"""
    print("ü§ñ Setting up Ollama models...")

    models_to_pull = [Config.DEFAULT_MODEL] + Config.ALTERNATIVE_MODELS[:2]

    for model in models_to_pull:
        print(f"üì• Pulling {model}...")
        try:
            subprocess.run(["ollama", "pull", model], check=True)
            print(f"‚úÖ {model} ready!")
        except subprocess.CalledProcessError:
            print(f"‚ùå Failed to pull {model}")

    print("‚úÖ Model setup completed!")

# =============================================================================
# Quick Start Function
# =============================================================================

def quick_start():
    """Quick start setup for new users"""
    print("üöÄ AI NEET Coach - Quick Start Setup")
    print("=" * 50)

    # Step 1: Check Python version
    python_version = sys.version_info
    if python_version < (3, 8):
        print("‚ùå Python 3.8+ required. Please upgrade Python.")
        return False

    print(f"‚úÖ Python {python_version.major}.{python_version.minor} detected")

    # Step 2: Install requirements
    print("\nüì¶ Installing Python packages...")
    install_requirements()

    # Step 3: Setup Ollama
    print("\nü§ñ Setting up Ollama...")
    if not check_ollama():
        print("Please install Ollama from https://ollama.ai and run this setup again.")
        return False

    setup_ollama_models()

    # Step 4: Setup environment
    print("\nüìÅ Setting up directories...")
    setup_environment()

    # Step 5: Instructions
    print("\n‚úÖ Quick setup completed!")
    print("\nüìã Next steps:")
    print("1. Add your NCERT PDFs to data/ncert/")
    print("2. Add your MCQ files to data/mcqs/")
    print("3. Run: python start_coach.py")
    print("\nOr run CLI version: python start_coach.py --cli")

    return True

# =============================================================================
# Main execution logic
# =============================================================================

if __name__ == "__main__":
    import sys

    # Handle different execution modes
    if len(sys.argv) > 1:
        if sys.argv[1] == '--cli':
            run_cli()
        elif sys.argv[1] == '--quick-start':
            quick_start()
        elif sys.argv[1] == '--install':
            install_requirements()
        elif sys.argv[1] == '--setup-models':
            setup_ollama_models()
        else:
            # Run with arguments
            main()
    else:
        # Default: run main application
        main()