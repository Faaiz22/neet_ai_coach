# -*- coding: utf-8 -*-
"""ui_interface.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CTkh-DsYx9N00ZjMYlv85VIJha7AgkBT
"""

import streamlit as st
from typing import Optional

class NEETCoachUI:
    def __init__(self):
        self.llm = LLMPlugin()
        self.memory = None
        self.knowledge = KnowledgeIngestion()

        # Initialize session state
        if 'memory_manager' not in st.session_state:
            st.session_state.memory_manager = MemoryManager()

        self.memory = st.session_state.memory_manager

    def setup_sidebar(self):
        """Setup sidebar with options"""
        st.sidebar.title("üéØ NEET Coach Settings")

        # Model selection
        available_models = self.llm.list_available_models()
        if available_models:
            selected_model = st.sidebar.selectbox(
                "Select Model",
                available_models,
                index=0 if self.llm.model_name in available_models else 0
            )
            if selected_model != self.llm.model_name:
                self.llm.model_name = selected_model
        else:
            st.sidebar.warning("No models found. Run 'ollama pull llama3.2:3b' first.")

        # Subject filter
        subject_filter = st.sidebar.selectbox(
            "Subject Focus",
            ["All", "Physics", "Chemistry", "Biology"]
        )

        # Study mode
        study_mode = st.sidebar.selectbox(
            "Study Mode",
            ["Chat", "MCQ Practice", "Topic Explanation", "Doubt Clearing"]
        )

        # User profile
        st.sidebar.subheader("üìä Your Progress")
        if self.memory.user_profile["weak_topics"]:
            st.sidebar.write("**Weak Topics:**")
            for topic in self.memory.user_profile["weak_topics"][:5]:
                st.sidebar.write(f"‚Ä¢ {topic}")

        if self.memory.user_profile["strong_topics"]:
            st.sidebar.write("**Strong Topics:**")
            for topic in self.memory.user_profile["strong_topics"][:5]:
                st.sidebar.write(f"‚Ä¢ {topic}")

        return subject_filter, study_mode

    def display_chat_interface(self, subject_filter: str):
        """Main chat interface"""
        st.title("ü§ñ AI NEET Coach")
        st.markdown("Ask me anything about Physics, Chemistry, or Biology!")

        # Display chat history
        if self.memory.conversation_history:
            for turn in self.memory.conversation_history[-10:]:  # Show last 10 turns
                with st.chat_message("user"):
                    st.write(turn.user_input)
                with st.chat_message("assistant"):
                    st.write(turn.bot_response)

        # Chat input
        user_input = st.chat_input("Type your question here...")

        if user_input:
            # Display user message
            with st.chat_message("user"):
                st.write(user_input)

            # Get context from knowledge base
            search_filter = None if subject_filter == "All" else subject_filter
            search_results = self.knowledge.search_knowledge_base(
                user_input,
                num_results=3,
                subject_filter=search_filter
            )

            context = ""
            if search_results:
                context_parts = []
                for result in search_results:
                    context_parts.append(result['content'][:300])
                context = "\n\n".join(context_parts)

            # Get recent conversation context
            recent_context = self.memory.get_recent_context(3)
            full_context = f"{recent_context}\n\nRelevant Knowledge:\n{context}"

            # Generate response
            with st.chat_message("assistant"):
                with st.spinner("Thinking..."):
                    response = self.llm.generate_response(
                        user_input,
                        full_context
                    )
                st.write(response)

            # Save to memory
            self.memory.add_turn(user_input, response, context)

    def display_mcq_practice(self, subject_filter: str):
        """MCQ practice interface"""
        st.title("üìù MCQ Practice")

        # Search for MCQs
        search_filter = None if subject_filter == "All" else subject_filter
        mcq_results = self.knowledge.search_knowledge_base(
            "practice questions MCQ",
            num_results=10,
            subject_filter=search_filter
        )

        # Filter only MCQ results
        mcqs = [r for r in mcq_results if r['metadata'].get('type') == 'mcq']

        if not mcqs:
            st.warning("No MCQs found. Please add MCQ files to data/mcqs/")
            return

        # Select random MCQ
        if st.button("Get New Question"):
            import random
            st.session_state.current_mcq = random.choice(mcqs)

        if 'current_mcq' in st.session_state:
            mcq = st.session_state.current_mcq
            content = mcq['content']

            # Parse MCQ content
            lines = content.split('\n')
            question = ""
            options = []
            correct_answer = ""
            explanation = ""

            for line in lines:
                if line.startswith("Question:"):
                    question = line.replace("Question:", "").strip()
                elif line.startswith("Options:"):
                    options_text = line.replace("Options:", "").strip()
                    options = [opt.strip() for opt in options_text.split('|')]
                elif line.startswith("Correct Answer:"):
                    correct_answer = line.replace("Correct Answer:", "").strip()
                elif line.startswith("Explanation:"):
                    explanation = line.replace("Explanation:", "").strip()

            if question and options:
                st.subheader("Question")
                st.write(question)

                # Options
                user_answer = st.radio("Select your answer:", options, key="mcq_answer")

                if st.button("Submit Answer"):
                    st.subheader("Result")
                    if user_answer and correct_answer in user_answer:
                        st.success("‚úÖ Correct!")
                        self.memory.update_user_profile(
                            mcq['metadata'].get('subject', 'General'),
                            "strong"
                        )
                    else:
                        st.error("‚ùå Incorrect!")
                        self.memory.update_user_profile(
                            mcq['metadata'].get('subject', 'General'),
                            "weak"
                        )

                    st.write(f"**Correct Answer:** {correct_answer}")

                    if explanation:
                        st.write(f"**Explanation:** {explanation}")
                    else:
                        # Generate explanation using LLM
                        with st.spinner("Generating explanation..."):
                            llm_explanation = self.llm.solve_mcq(question, options)
                            st.write(f"**AI Explanation:**\n{llm_explanation}")

    def display_topic_explanation(self, subject_filter: str):
        """Topic explanation interface"""
        st.title("üìö Topic Explanation")

        topic = st.text_input("Enter topic to study:")

        if topic and st.button("Get Explanation"):
            # Search for relevant content
            search_filter = None if subject_filter == "All" else subject_filter
            search_results = self.knowledge.search_knowledge_base(
                topic,
                num_results=5,
                subject_filter=search_filter
            )

            context = ""
            if search_results:
                context_parts = []
                for result in search_results:
                    context_parts.append(result['content'])
                context = "\n\n".join(context_parts)

            with st.spinner("Generating explanation..."):
                explanation = self.llm.generate_explanation(topic, context)

            st.subheader(f"Explanation: {topic}")
            st.write(explanation)

            # Save to memory
            self.memory.add_turn(
                f"Explain: {topic}",
                explanation,
                context,
                topic
            )

    def run(self):
        """Run the Streamlit app"""
        st.set_page_config(
            page_title="AI NEET Coach",
            page_icon="üéØ",
            layout="wide"
        )

        # Setup sidebar
        subject_filter, study_mode = self.setup_sidebar()

        # Main interface based on study mode
        if study_mode == "Chat":
            self.display_chat_interface(subject_filter)
        elif study_mode == "MCQ Practice":
            self.display_mcq_practice(subject_filter)
        elif study_mode == "Topic Explanation":
            self.display_topic_explanation(subject_filter)
        else:  # Doubt Clearing
            self.display_chat_interface(subject_filter)