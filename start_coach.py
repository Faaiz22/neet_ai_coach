# -*- coding: utf-8 -*-
"""start_coach.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CTkh-DsYx9N00ZjMYlv85VIJha7AgkBT
"""

import sys
import subprocess
import argparse
from pathlib import Path

def check_dependencies():
    """Check if required dependencies are installed"""
    required_packages = [
        'streamlit', 'ollama', 'transformers', 'sentence-transformers',
        'chromadb', 'pypdf2', 'python-docx', 'pandas'
    ]

    missing_packages = []
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)

    if missing_packages:
        print(f"Missing packages: {missing_packages}")
        print("Install with: pip install " + " ".join(missing_packages))
        return False

    return True

def check_ollama():
    """Check if Ollama is installed and has models"""
    try:
        result = subprocess.run(['ollama', 'list'], capture_output=True, text=True)
        if result.returncode == 0:
            return True
        else:
            print("Ollama not found. Please install from https://ollama.ai")
            return False
    except FileNotFoundError:
        print("Ollama not found. Please install from https://ollama.ai")
        return False

def setup_environment():
    """Setup the environment and directories"""
    print("Setting up AI NEET Coach environment...")
    Config.ensure_directories()

    # Create sample data structure info
    readme_content = """
# AI NEET Coach Data Structure

## NCERT Files (data/ncert/)
Place your NCERT PDF or DOCX files here:
- Physics_Class11.pdf
- Chemistry_Class12.pdf
- Biology_NCERT.pdf

## MCQ Files (data/mcqs/)
Place your MCQ CSV or XLSX files here with columns:
- question: The question text
- option_a, option_b, option_c, option_d: Answer options
- correct_answer: The correct answer
- explanation: (optional) Explanation of the answer

Example: physics_mcqs.csv, chemistry_questions.xlsx

## Knowledge Base (data/knowledge_base/)
This directory will store the processed vector database.
Don't modify files here manually.
"""

    readme_path = Config.DATA_DIR / "README.md"
    with open(readme_path, 'w') as f:
        f.write(readme_content)

    print(f"‚úÖ Environment setup complete!")
    print(f"üìÅ Data directory: {Config.DATA_DIR}")
    print(f"üìñ Read {readme_path} for data placement instructions")

def ingest_knowledge():
    """Run knowledge ingestion"""
    print("üîÑ Starting knowledge ingestion...")
    try:
        ingestion = KnowledgeIngestion()
        ingestion.ingest_all()
        print("‚úÖ Knowledge ingestion completed!")
    except Exception as e:
        print(f"‚ùå Knowledge ingestion failed: {e}")
        return False
    return True

def start_streamlit_app():
    """Start the Streamlit application"""
    print("üöÄ Starting AI NEET Coach...")
    try:
        # Create the UI instance and run
        ui = NEETCoachUI()
        ui.run()
    except Exception as e:
        print(f"‚ùå Failed to start UI: {e}")
        return False

def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description="AI NEET Coach - Complete Learning System")
    parser.add_argument('--setup', action='store_true', help='Setup environment only')
    parser.add_argument('--ingest', action='store_true', help='Run knowledge ingestion only')
    parser.add_argument('--no-ingest', action='store_true', help='Skip knowledge ingestion')
    parser.add_argument('--model', default=Config.DEFAULT_MODEL, help='Ollama model to use')
    parser.add_argument('--port', type=int, default=Config.STREAMLIT_PORT, help='Streamlit port')

    args = parser.parse_args()

    print("üéØ AI NEET Coach - Complete Learning System")
    print("=" * 50)

    # Check dependencies
    if not check_dependencies():
        print("‚ùå Please install missing dependencies first")
        return 1

    # Check Ollama
    if not check_ollama():
        print("‚ùå Please install Ollama first")
        return 1

    # Setup environment
    setup_environment()

    if args.setup:
        print("‚úÖ Setup completed!")
        return 0

    # Knowledge ingestion
    if args.ingest:
        return 0 if ingest_knowledge() else 1

    if not args.no_ingest:
        print("üîÑ Checking for knowledge base...")
        knowledge_base_exists = (Config.KNOWLEDGE_BASE_DIR / "chroma.sqlite3").exists()

        if not knowledge_base_exists:
            print("üìö No knowledge base found. Running ingestion...")
            if not ingest_knowledge():
                print("‚ö†Ô∏è  Knowledge ingestion failed, but continuing with basic functionality")
        else:
            print("‚úÖ Knowledge base found!")

    # Update model if specified
    if args.model != Config.DEFAULT_MODEL:
        Config.DEFAULT_MODEL = args.model

    # Start the application
    print(f"üöÄ Starting AI NEET Coach on port {args.port}...")
    print(f"ü§ñ Using model: {Config.DEFAULT_MODEL}")
    print(f"üåê Open browser to: http://localhost:{args.port}")
    print("\nPress Ctrl+C to stop the application")

    try:
        # Run Streamlit app
        subprocess.run([
            'streamlit', 'run', __file__,
            '--server.port', str(args.port),
            '--server.headless', 'true',
            '--browser.gatherUsageStats', 'false'
        ])
    except KeyboardInterrupt:
        print("\nüëã AI NEET Coach stopped!")
        return 0
    except Exception as e:
        print(f"‚ùå Error starting application: {e}")
        return 1

if __name__ == "__main__":
    # This allows the script to work both as a module and as a standalone script
    try:
        # If running as streamlit app
        if 'streamlit' in sys.modules:
            ui = NEETCoachUI()
            ui.run()
        else:
            # If running as main script
            sys.exit(main())
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        sys.exit(1)